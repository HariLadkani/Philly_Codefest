"use client";

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/P4AXlKqyBty
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

 import { Inter } from 'next/font/google'

 inter({
 subsets: ['latin'],
 display: 'swap',
 })

 To read more about using these font, please visit the Next.js documentation:
 - App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
 - Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
 **/
import { Textarea } from "@/components/ui/textarea"
import Lessons from "@/app/lessons/page";
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";  // Ensure you have this button component or replace it with a standard HTML button if not available.


interface Message {
    role: string;
    content: string;
  }

export function Simulator() {
    const [chatMessage, setChatMessage] = useState("");
    const [chatHistory, setChatHistory] = useState<Message[]>([{role: "system", content: "You are a helpful assistant."}]);

    const handleSendMessage = async () => {
        if (chatMessage.trim() === "") return;  // Avoid sending empty messages
    
        const userMessage = chatMessage;
        console.log(userMessage)
        setChatMessage("");  // Clear the message input
        
        const newmsg:Message = {role :"user", content: userMessage}
        setChatHistory(prevHistory => [...prevHistory, newmsg]) 
    
        console.log(chatHistory)
      
        try {
          // Send the user message to your backend
          const response = await fetch('http://127.0.0.1:3002/llm_chatbot', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(chatHistory.concat(newmsg)),
          });
    
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
    
          const data = await response.json();
          // Assume the backend returns a JSON with a 'response' field containing the AI's response
          
          const aiResponse = data["feedback"];
          console.log(aiResponse)
    
          const messageresponse: Message = {role: "assistant", content: aiResponse}
          setChatHistory(prevHistory => [...prevHistory, messageresponse]) 
    
          // Update the chat history with the AI's response
          //setChatHistory(prevHistory => [...prevHistory, `AI: ${aiResponse}`]);
        } catch (error) {
          console.error("Failed to send message:", error);
          // Here you could update the chat history with a message indicating the error or handle it in another way
        }
      };

    return (
        <div className="flex flex-col items-center justify-center h-screen bg-gray-100 dark:bg-gray-900">
            <div className="relative w-full max-w-md">
                <img
                    alt="Person"
                    className="mx-auto rounded-full shadow-lg"
                    height={200}
                    src="/woman.png"
                    style={{
                        aspectRatio: "400/400",
                        objectFit: "cover",
                    }}
                    width={400}
                />
                <div className="rounded-md border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-800 dark:bg-gray-900">
              <h2 className="text-xl font-semibold">Chat</h2>
              <div className="flex flex-col h-[600px] rounded-md border border-gray-200 bg-gray-50 p-4 dark:border-gray-800 dark:bg-gray-800">
                <div className="flex-1 overflow-auto mb-4">
                {chatHistory.slice(1).map((msg, index) => (
                  <div key={index}
                    className={`text-black dark:text-white p-2 ${index % 2 === 0 ? 'odd-item' : 'even-item'}`}>
                    {msg['content']}
                  </div>
                ))}
                </div>
                <div className="flex">
                  <ul id="unord">
                    <li>
                      <input
                          type="text"
                          value={chatMessage}
                          onChange={e => setChatMessage(e.target.value)}
                          className="flex-1 rounded-l-md p-2 dark:bg-gray-700 dark:text-white"
                          placeholder="Type your message..."
                      />
                    </li>
                    <li>
                      <Button onClick={handleSendMessage} className="rounded-r-md">Send</Button>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
            </div>
        </div>
    )
}

export default Simulator;
